<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleSOAPClient</name>
    </assembly>
    <members>
        <member name="T:SimpleSOAPClient.Constant">
            <summary>
            Class with a wide range of constant values
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Constant.Namespace">
            <summary>
            Namespace constants
            </summary>
        </member>
        <member name="F:SimpleSOAPClient.Constant.Namespace.OrgXmlSoapSchemasSoapEnvelope">
            <summary>
            The SOAP Envelope namespace
            </summary>
        </member>
        <member name="F:SimpleSOAPClient.Constant.Namespace.ComMicrosoftSchemasWs200505AddressingNone">
            <summary>
            The Microsoft addressing namespace
            </summary>
        </member>
        <member name="F:SimpleSOAPClient.Constant.Namespace.OrgOpenOasisDocsWss200401Oasis200401WssWssecuritySecext10">
            <summary>
            The Oasis Security namespace
            </summary>
        </member>
        <member name="F:SimpleSOAPClient.Constant.Namespace.OrgOpenOasisDocsWss200401Oasis200401WssWssecurityUtility10">
            <summary>
            The Oasis Security Utilities namespace
            </summary>
        </member>
        <member name="F:SimpleSOAPClient.Constant.Namespace.OrgOpenOasisDocsWss200401Oasis200401WssUsernameTokenProfile10PasswordText">
            <summary>
            
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Exceptions.FaultException">
            <summary>
            Exception representing a fault returned by the server
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Exceptions.FaultException.Code">
            <summary>
            The fault code
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Exceptions.FaultException.String">
            <summary>
            The fault string
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Exceptions.FaultException.Actor">
            <summary>
            The fault actor
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Exceptions.FaultException.Detail">
            <summary>
            The fault detail
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.FaultException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.FaultException"/> with 
            a default error message
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.FaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.FaultException"/> with 
            a specified error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.FaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.FaultException"/> with 
            a specified error message and a reference to the inner exception
            </summary>
            <param name="message">The error message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.FaultException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.FaultException"/> with 
            a specified error message and a reference to the inner exception
            </summary>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:SimpleSOAPClient.Exceptions.SoapClientException">
            <summary>
            Base class for specialized exceptions thrown by the Simple SOAP Client library
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapClientException"/>
            </summary>
            <param name="message">The message to be used</param>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapClientException"/>
            </summary>
            <param name="message">The message to be used</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException">
            <summary>
            Exception thrown when an exception is thrown when deserializing
            a given XML string to a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException.XmlValue">
            <summary>
            The XML string that was beeing deserialized
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException"/>
            </summary>
            <param name="xmlValue">The XML string that was beeing deserialized</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException"/>
            </summary>
            <param name="xmlValue">The XML string that was beeing deserialized</param>
            <param name="message">The message to be used</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException"/>
            </summary>
            <param name="xmlValue">The XML string that was beeing deserialized</param>
            <param name="message">The message to be used</param>
            <param name="innerException">The inner exception</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException"/>
            </summary>
            <param name="xmlValue">The XML string that was beeing deserialized</param>
            <param name="innerException">The inner exception</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException">
            <summary>
            Exception thrown when an exception is thrown when serializing
            a given <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to a XML string.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException.Envelope">
            <summary>
            The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> that failed to be serialized
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException.#ctor(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException"/>
            </summary>
            <param name="envelope">The envelope that failed to serialize</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException.#ctor(SimpleSOAPClient.Models.SoapEnvelope,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException"/>
            </summary>
            <param name="envelope">The envelope that failed to serialize</param>
            <param name="message">The message to be used</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException.#ctor(SimpleSOAPClient.Models.SoapEnvelope,System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException"/>
            </summary>
            <param name="envelope">The envelope that failed to serialize</param>
            <param name="message">The message to be used</param>
            <param name="innerException">The inner exception</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException.#ctor(SimpleSOAPClient.Models.SoapEnvelope,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException"/>
            </summary>
            <param name="envelope">The envelope that failed to serialize</param>
            <param name="innerException">The inner exception</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler">
            <summary>
            SOAP Handler that exposes delegates for each handling operation.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnSoapEnvelopeRequestAsyncAction">
            <summary>
            Delegate for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnHttpRequestAsyncAction">
            <summary>
            Delegate for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnHttpResponseAsyncAction">
            <summary>
            Delegate for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnSoapEnvelopeResponseAsyncAction">
            <summary>
            Delegate for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.DelegatingSoapHandler.Order">
            <summary>
            The order for which the handler will be executed
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked before serializing a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>. 
            Useful to add properties like <see cref="T:SimpleSOAPClient.Models.SoapHeader"/>.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked before sending the <see cref="T:System.Net.Http.HttpRequestMessage"/> to the server.
            Useful to log the request or change properties like HTTP headers.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked after receiving a <see cref="T:System.Net.Http.HttpResponseMessage"/> from the server.
            Useful to log the response or validate HTTP headers.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.DelegatingSoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked after deserializing a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> from the server response. 
            Useful to validate properties like <see cref="T:SimpleSOAPClient.Models.SoapHeader"/>.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.ISoapHandler">
            <summary>
            Represents an handler for SOAP requests and responses.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.ISoapHandler.Order">
            <summary>
            The order for which the handler will be executed
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked before serializing a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>. 
            Useful to add properties like <see cref="T:SimpleSOAPClient.Models.SoapHeader"/>.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked before sending the <see cref="T:System.Net.Http.HttpRequestMessage"/> to the server.
            Useful to log the request or change properties like HTTP headers.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked after receiving a <see cref="T:System.Net.Http.HttpResponseMessage"/> from the server.
            Useful to log the response or validate HTTP headers.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked after deserializing a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> from the server response. 
            Useful to validate properties like <see cref="T:SimpleSOAPClient.Models.SoapHeader"/>.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.OnHttpRequestArguments">
            <summary>
            The SOAP Handler arguments for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.OnHttpRequestArguments.#ctor(System.Net.Http.HttpRequestMessage,System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a new instance
            </summary>
            <param name="request">The HTTP message request</param>
            <param name="url">The SOAP service url</param>
            <param name="action">The SOAP action</param>
            <param name="trackingId">An optional tracking id</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.OnHttpRequestArguments.Request">
            <summary>
            The current HTTP request message
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.OnHttpResponseArguments">
            <summary>
            The SOAP Handler arguments for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.OnHttpResponseArguments.#ctor(System.Net.Http.HttpResponseMessage,System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a new instance
            </summary>
            <param name="response">The HTTP message response</param>
            <param name="url">The SOAP service url</param>
            <param name="action">The SOAP action</param>
            <param name="trackingId">An optional tracking id</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.OnHttpResponseArguments.Response">
            <summary>
            The current HTTP response message
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments">
            <summary>
            The SOAP Handler arguments for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments.#ctor(SimpleSOAPClient.Models.SoapEnvelope,System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a new instance
            </summary>
            <param name="envelope">The SOAP envelope</param>
            <param name="url">The SOAP service url</param>
            <param name="action">The SOAP action</param>
            <param name="trackingId">An optional tracking id</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments.Envelope">
            <summary>
            The SOAP Envelope to be serialized
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments">
            <summary>
            The SOAP Handler arguments for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments.#ctor(SimpleSOAPClient.Models.SoapEnvelope,System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a new instance
            </summary>
            <param name="envelope">The SOAP envelope</param>
            <param name="url">The SOAP service url</param>
            <param name="action">The SOAP action</param>
            <param name="trackingId">An optional tracking id</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments.Envelope">
            <summary>
            The SOAP Envelope that was deserialized
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.SoapHandler">
            <summary>
            Base SOAP Handler that extending classes can use to override
            only specific operations.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.SoapHandler.Order">
            <summary>
            The order for which the handler will be executed
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.SoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked before serializing a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>. 
            Useful to add properties like <see cref="T:SimpleSOAPClient.Models.SoapHeader"/>.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.SoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked before sending the <see cref="T:System.Net.Http.HttpRequestMessage"/> to the server.
            Useful to log the request or change properties like HTTP headers.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.SoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked after receiving a <see cref="T:System.Net.Http.HttpResponseMessage"/> from the server.
            Useful to log the response or validate HTTP headers.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.SoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)">
            <summary>
            Method invoked after deserializing a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> from the server response. 
            Useful to validate properties like <see cref="T:SimpleSOAPClient.Models.SoapHeader"/>.
            </summary>
            <param name="client">The client sending the request</param>
            <param name="arguments">The method arguments</param>
            <param name="ct">The cancellation token</param>
            <returns>Task to be awaited</returns>
        </member>
        <member name="T:SimpleSOAPClient.Handlers.SoapHandlerArguments">
            <summary>
            Base class for SOAP Handler argument classes
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Handlers.SoapHandlerArguments.#ctor(System.String,System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a new instance
            </summary>
            <param name="url">The SOAP service url</param>
            <param name="action">The SOAP action</param>
            <param name="trackingId">An optional tracking id. If null <see cref="M:System.Guid.NewGuid"/> will be used.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.SoapHandlerArguments.Url">
            <summary>
            The URL being invoked
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.SoapHandlerArguments.Action">
            <summary>
            The action being invoked
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.SoapHandlerArguments.TrackingId">
            <summary>
            A unique identifier to track the current request
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Handlers.SoapHandlerArguments.State">
            <summary>
            An object state that will be passed
            accross all the handlers
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Helpers.ClientFactoryHelpers">
            <summary>
            Helper methods for working with <see cref="T:SimpleSOAPClient.ISoapClientFactory"/> instances.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndRelease``1(SimpleSOAPClient.ISoapClientFactory,System.Action{``0})">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndRelease(SimpleSOAPClient.ISoapClientFactory,System.Action{SimpleSOAPClient.SoapClient})">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndRelease``2(SimpleSOAPClient.ISoapClientFactory,System.Func{``0,``1})">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <returns>The action result</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndRelease``1(SimpleSOAPClient.ISoapClientFactory,System.Func{SimpleSOAPClient.SoapClient,``0})">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <returns>The action result</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndReleaseAsync``1(SimpleSOAPClient.ISoapClientFactory,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <param name="ct">The cancelattion token</param>
            <returns>A task that can be awaited</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndReleaseAsync(SimpleSOAPClient.ISoapClientFactory,System.Func{SimpleSOAPClient.SoapClient,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <param name="ct">The cancelattion token</param>
            <returns>A task that can be awaited</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndReleaseAsync``2(SimpleSOAPClient.ISoapClientFactory,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <param name="ct">The cancellation token</param>
            <returns>A task that can be awaited for the result</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientFactoryHelpers.GetAndReleaseAsync``1(SimpleSOAPClient.ISoapClientFactory,System.Func{SimpleSOAPClient.SoapClient,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:SimpleSOAPClient.ISoapClient"/> instance from the factory and releases 
            when the action completes.
            </summary>
            <typeparam name="TResult">The result type</typeparam>
            <param name="factory">The factory to use</param>
            <param name="action">The action to execute</param>
            <param name="ct">The cancellation token</param>
            <returns>A task that can be awaited for the result</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:SimpleSOAPClient.Helpers.ClientHelpers">
            <summary>
            Helper methods for working with <see cref="T:SimpleSOAPClient.ISoapClient"/> instances.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.UsingSettings``1(``0,SimpleSOAPClient.SoapClientSettings)">
            <summary>
            Sets the <see cref="T:SimpleSOAPClient.SoapClientSettings"/> to be used by the client.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="settings">The settings to be used</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.UsingDefaultSettings``1(``0)">
            <summary>
            Sets the <see cref="P:SimpleSOAPClient.SoapClientSettings.Default"/> as the settings to be used by the client.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.WithHandler``1(``0,SimpleSOAPClient.Handlers.ISoapHandler)">
            <summary>
            Adds the given handler to the SOAP client
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="handler">The handler to add</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnSoapEnvelopeRequest``1(``0,System.Func{SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnSoapEnvelopeRequest``1(``0,System.Func{SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeRequestArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnHttpRequest``1(``0,System.Func{SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnHttpRequest``1(``0,System.Func{SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpRequestAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpRequestArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnHttpResponse``1(``0,System.Func{SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnHttpResponse``1(``0,System.Func{SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnHttpResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnHttpResponseArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnSoapEnvelopeResponse``1(``0,System.Func{SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.OnSoapEnvelopeResponse``1(``0,System.Func{SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Assigns the given delegate has an handler for <see cref="M:SimpleSOAPClient.Handlers.ISoapHandler.OnSoapEnvelopeResponseAsync(SimpleSOAPClient.ISoapClient,SimpleSOAPClient.Handlers.OnSoapEnvelopeResponseArguments,System.Threading.CancellationToken)"/>
            operations using a <see cref="T:SimpleSOAPClient.Handlers.DelegatingSoapHandler"/> as a wrapper.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <param name="client">The client to be used</param>
            <param name="action">The handler action</param>
            <param name="order">The handler order</param>
            <returns>The SOAP client after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.UsingClientConfiguration``1(``0,System.Action{System.Net.Http.HttpClient})">
            <summary>
            Allows an handler to configure the <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/> instance.
            </summary>
            <typeparam name="TSoapClient">The SOAP Client type</typeparam>
            <param name="client">The client to configure</param>
            <param name="cfgHandler">The configuration handler</param>
            <returns>The client after changes</returns>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.ClientHelpers.Send(SimpleSOAPClient.ISoapClient,System.String,System.String,SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Sends the given <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> into the specified url.
            </summary>
            <param name="client">The client to be used</param>
            <param name="url">The url that will receive the request</param>
            <param name="action">The SOAP Action beeing performed</param>
            <param name="requestEnvelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to be sent</param>
            <returns>The resulting <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:SimpleSOAPClient.Helpers.EnvelopeHelpers">
            <summary>
            Helper methods for working with <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> instances.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.Body(SimpleSOAPClient.Models.SoapEnvelope,System.Xml.Linq.XElement)">
            <summary>
            Sets the given <see cref="T:System.Xml.Linq.XElement"/> as the envelope body.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to be used.</param>
            <param name="body">The <see cref="T:System.Xml.Linq.XElement"/> to set as the body.</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> after changes.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.Body``1(SimpleSOAPClient.Models.SoapEnvelope,``0)">
            <summary>
            Sets the given entity as the envelope body.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to be used.</param>
            <param name="body">The entity to set as the body.</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> after changes.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.Body``1(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Extracts the <see cref="P:SimpleSOAPClient.Models.SoapEnvelope.Body"/> as an object of the given type.
            </summary>
            <typeparam name="T">The type do be deserialized.</typeparam>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/></param>
            <returns>The deserialized object</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SimpleSOAPClient.Exceptions.FaultException">Thrown if the body contains a fault</exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.WithHeaders(SimpleSOAPClient.Models.SoapEnvelope,System.Xml.Linq.XElement[])">
            <summary>
            Appends the received <see cref="T:System.Xml.Linq.XElement"/> collection to the existing
            ones in the received <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to append the headers</param>
            <param name="headers">The <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> collection to append</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.WithHeaders(SimpleSOAPClient.Models.SoapEnvelope,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Appends the received <see cref="T:System.Xml.Linq.XElement"/> collection to the existing
            ones in the received <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to append the headers</param>
            <param name="headers">The <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> collection to append</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.WithHeaders(SimpleSOAPClient.Models.SoapEnvelope,SimpleSOAPClient.Models.SoapHeader[])">
            <summary>
            Appends the received <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> collection to the existing
            ones in the received <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to append the headers</param>
            <param name="headers">The <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> collection to append</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.WithHeaders(SimpleSOAPClient.Models.SoapEnvelope,System.Collections.Generic.IEnumerable{SimpleSOAPClient.Models.SoapHeader})">
            <summary>
            Appends the received <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> collection to the existing
            ones in the received <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to append the headers</param>
            <param name="headers">The <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> collection to append</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> after changes</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.Header(SimpleSOAPClient.Models.SoapEnvelope,System.Xml.Linq.XName)">
            <summary>
            Gets a given <see cref="T:System.Xml.Linq.XElement"/> by its <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> with the headers.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to search.</param>
            <returns>The <see cref="T:System.Xml.Linq.XElement"/> or null if not match is found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.Header``1(SimpleSOAPClient.Models.SoapEnvelope,System.Xml.Linq.XName)">
            <summary>
            Gets a given <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> by its <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> with the headers.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to search.</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> or null if not match is found</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.IsFaulted(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Does the <see cref="P:SimpleSOAPClient.Models.SoapEnvelope.Body"/> contains a fault?
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to validate</param>
            <returns>True if a fault exists</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.ThrowIfFaulted(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Checks if the <see cref="P:SimpleSOAPClient.Models.SoapEnvelope.Body"/> contains a fault 
            and throws an <see cref="T:SimpleSOAPClient.Exceptions.FaultException"/> if true.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to validate.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SimpleSOAPClient.Exceptions.FaultException">Thrown if the body contains a fault</exception>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.Fault(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Extracts the <see cref="P:SimpleSOAPClient.Models.SoapEnvelope.Body"/> as a <see cref="T:SimpleSOAPClient.Models.SoapFault"/>.
            It will fail to deserialize if the body is not a fault. Consider to
            use <see cref="M:SimpleSOAPClient.Helpers.EnvelopeHelpers.IsFaulted(SimpleSOAPClient.Models.SoapEnvelope)"/> first.
            </summary>
            <param name="envelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to be used</param>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapFault"/></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:SimpleSOAPClient.Helpers.XmlHelpers">
            <summary>
            Helper class with extensions for XML manipulation
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.XmlHelpers.ToXmlString``1(``0,System.Boolean)">
            <summary>
            Serializes the given object to a XML string
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="item">The item to serialize</param>
            <param name="removeXmlDeclaration">Remove the XML declaration</param>
            <returns>The XML string</returns>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.XmlHelpers.ToXmlString``1(``0)">
            <summary>
            Serializes the given object to a XML string
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="item">The item to serialize</param>
            <returns>The XML string</returns>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.XmlHelpers.ToXElement``1(``0,System.Boolean)">
            <summary>
            Serializes a given object to XML and returns the <see cref="T:System.Xml.Linq.XElement"/> representation.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="item">The item to convert</param>
            <param name="removeXmlDeclaration">Remove the XML declaration</param>
            <returns>The object as a <see cref="T:System.Xml.Linq.XElement"/></returns>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.XmlHelpers.ToXElement``1(``0)">
            <summary>
            Serializes a given object to XML and returns the <see cref="T:System.Xml.Linq.XElement"/> representation.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="item">The item to convert</param>
            <returns>The object as a <see cref="T:System.Xml.Linq.XElement"/></returns>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.XmlHelpers.ToObject``1(System.String)">
            <summary>
            Deserializes a given XML string to a new object of the expected type.
            If null or white spaces the default(T) will be returned;
            </summary>
            <typeparam name="T">The type to be deserializable</typeparam>
            <param name="xml">The XML string to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:SimpleSOAPClient.Helpers.XmlHelpers.ToObject``1(System.Xml.Linq.XElement)">
            <summary>
            Deserializes a given <see cref="T:System.Xml.Linq.XElement"/> to a new object of the expected type.
            If null the default(T) will be returned.
            </summary>
            <typeparam name="T">The type to be deserializable</typeparam>
            <param name="xml">The <see cref="T:System.Xml.Linq.XElement"/> to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:SimpleSOAPClient.HttpClientFactory">
            <summary>
            The <see cref="T:System.Net.Http.HttpClient"/> factory to be used by <see cref="T:SimpleSOAPClient.SoapClient"/>
            when no client is provided.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.HttpClientFactory.DefaultBaseAddress">
            <summary>
            Gets or sets the default base address of Uniform Resource Identifier (URI) of the Internet 
            resource used when sending requests.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.HttpClientFactory.DefaultMaxResponseContentBufferSize">
            <summary>
            The default response content buffer size
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.HttpClientFactory.DefaultTimeout">
            <summary>
            The default request timeout
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.HttpClientFactory.DefaultRequestHeaders">
            <summary>
            The defauld HTTP request headers that should be sent in every request.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.HttpClientFactory.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.HttpClientFactory.AddDefaultRequestHeader(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the given name avd values to the default request header collection.
            </summary>
            <param name="name">The header name</param>
            <param name="values">The header values</param>
        </member>
        <member name="M:SimpleSOAPClient.HttpClientFactory.AddDefaultRequestHeader(System.String,System.String[])">
            <summary>
            Adds the given name avd values to the default request header collection.
            </summary>
            <param name="name">The header name</param>
            <param name="values">The header values</param>
        </member>
        <member name="M:SimpleSOAPClient.HttpClientFactory.Get">
            <summary>
            Returns a new <see cref="T:System.Net.Http.HttpClient"/> instance.
            </summary>
            <returns>The HTTP client</returns>
        </member>
        <member name="M:SimpleSOAPClient.HttpClientFactory.Get(System.Net.Http.HttpMessageHandler)">
            <summary>
            Returns a new <see cref="T:System.Net.Http.HttpClient"/> instance that should used
            the given <see cref="T:System.Net.Http.HttpMessageHandler"/>.
            </summary>
            <param name="handler">The HTTP message handler</param>
            <returns>The HTTP client</returns>
        </member>
        <member name="T:SimpleSOAPClient.IHttpClientFactory">
            <summary>
            The <see cref="T:System.Net.Http.HttpClient"/> factory to be used by <see cref="T:SimpleSOAPClient.SoapClient"/>
            when no client is provided.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.IHttpClientFactory.Get">
            <summary>
            Returns a new <see cref="T:System.Net.Http.HttpClient"/> instance.
            </summary>
            <returns>The HTTP client</returns>
        </member>
        <member name="M:SimpleSOAPClient.IHttpClientFactory.Get(System.Net.Http.HttpMessageHandler)">
            <summary>
            Returns a new <see cref="T:System.Net.Http.HttpClient"/> instance that should used
            the given <see cref="T:System.Net.Http.HttpMessageHandler"/>.
            </summary>
            <param name="handler">The HTTP message handler</param>
            <returns>The HTTP client</returns>
        </member>
        <member name="T:SimpleSOAPClient.ISoapClient">
            <summary>
            The SOAP client that can be used to invoke SOAP Endpoints
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.ISoapClient.Handlers">
            <summary>
            The handler
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.ISoapClient.Settings">
            <summary>
            The client settings
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.ISoapClient.SendAsync(System.String,System.String,SimpleSOAPClient.Models.SoapEnvelope,System.Threading.CancellationToken)">
            <summary>
            Sends the given <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> into the specified url.
            </summary>
            <param name="url">The url that will receive the request</param>
            <param name="action">The SOAP action beeing performed</param>
            <param name="requestEnvelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to be sent</param>
            <param name="ct">The cancellation token</param>
            <returns>A task to be awaited for the result</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.ISoapClient.AddHandler(SimpleSOAPClient.Handlers.ISoapHandler)">
            <summary>
            Adds the <see cref="T:SimpleSOAPClient.Handlers.ISoapHandler"/> to the <see cref="P:SimpleSOAPClient.ISoapClient.Handlers"/> collection.
            </summary>
            <param name="handler">The handler to add</param>
        </member>
        <member name="T:SimpleSOAPClient.ISoapClientFactory">
            <summary>
            Creates <see cref="T:SimpleSOAPClient.ISoapClient"/> instances
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.ISoapClientFactory.Get``1">
            <summary>
            Gets an <see cref="T:SimpleSOAPClient.ISoapClient"/>.
            </summary>
            <typeparam name="TSoapClient">The SOAP client type</typeparam>
            <returns></returns>
        </member>
        <member name="M:SimpleSOAPClient.ISoapClientFactory.Release(SimpleSOAPClient.ISoapClient)">
            <summary>
            Indicates to the factory that the given <see cref="T:SimpleSOAPClient.ISoapClient"/>
            is no longer needed.
            </summary>
            <param name="client">The SOAP client to release</param>
        </member>
        <member name="T:SimpleSOAPClient.ISoapEnvelopeSerializationProvider">
            <summary>
            Provider for serialization and deserialization of <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> instances.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.ISoapEnvelopeSerializationProvider.ToXmlString(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Serializes a given <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> instance into a XML string.
            </summary>
            <param name="envelope">The instance to serialize</param>
            <returns>The resulting XML string</returns>
        </member>
        <member name="M:SimpleSOAPClient.ISoapEnvelopeSerializationProvider.ToSoapEnvelope(System.String)">
            <summary>
            Deserializes a given XML string into a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
            <param name="xml">The XML string do deserialize</param>
            <returns>The resulting <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/></returns>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.KnownHeader">
            <summary>
            Class with known <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> builder methods.
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.KnownHeader.Microsoft">
            <summary>
            Class with Microsoft specific <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> builder methods.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.Headers.KnownHeader.Microsoft.Action(System.String,System.Boolean)">
            <summary>
            Creates a new Microsoft Action SOAP Header.
            </summary>
            <param name="action">The action for the header</param>
            <param name="mustUnderstand">Does the server must understand the header?</param>
            <returns>The new <see cref="T:SimpleSOAPClient.Models.Headers.Microsoft.ActionSoapHeader"/></returns>
        </member>
        <member name="M:SimpleSOAPClient.Models.Headers.KnownHeader.Microsoft.To(System.String,System.Boolean)">
            <summary>
            Creates a new Microsoft To SOAP Header.
            </summary>
            <param name="to">The action for the header</param>
            <param name="mustUnderstand">Does the server must understand the header?</param>
            <returns>The new <see cref="T:SimpleSOAPClient.Models.Headers.Microsoft.ToSoapHeader"/></returns>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.KnownHeader.Oasis">
            <summary>
            Class with Oasis specific <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> builder methods.
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.KnownHeader.Oasis.Security">
            <summary>
            Class with Oasis Security specific <see cref="T:SimpleSOAPClient.Models.SoapHeader"/> builder methods.
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.Headers.KnownHeader.Oasis.Security.UsernameTokenAndPasswordText(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new Oasis Security Username Token with password text SOAP header.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <param name="mustUnderstand">Does the server must understand the header?</param>
            <returns>The new <see cref="T:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenAndPasswordTextSoapHeader"/></returns>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Microsoft.ActionSoapHeader">
            <summary>
            The Microsoft Action SOAP Header
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Microsoft.ActionSoapHeader.Action">
            <summary>
            The header action content
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Microsoft.ToSoapHeader">
            <summary>
            The Microsoft To SOAP Header
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Microsoft.ToSoapHeader.To">
            <summary>
            The header to content
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Oasis.Security.SecuritySoapHeader">
            <summary>
            Represents the SOAP Security Header
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.SecuritySoapHeader.Timestamp">
            <summary>
            The header timestamp
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.Headers.Oasis.Security.SecuritySoapHeader.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Oasis.Security.Timestamp">
            <summary>
            Represents a SOAP Security timestamp
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.Timestamp.Id">
            <summary>
            The timestamp id
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.Timestamp.Created">
            <summary>
            The date and time when the timestamp was created
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.Timestamp.Expires">
            <summary>
            The date and time when the timestamp expired
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenAndPasswordTextSoapHeader">
            <summary>
            The SOAP Security header for username and text passwords
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenAndPasswordTextSoapHeader.UsernameToken">
            <summary>
            The username token
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenAndPasswordTextSoapHeader.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenPasswordText">
            <summary>
            Represents the password text
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenPasswordText.Type">
            <summary>
            The password type
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenPasswordText.Value">
            <summary>
            The password value
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenPasswordText.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenWithPasswordText">
            <summary>
            Represents an username token with a password text
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenWithPasswordText.Id">
            <summary>
            The token id
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenWithPasswordText.Username">
            <summary>
            The username value
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.Headers.Oasis.Security.UsernameTokenWithPasswordText.Password">
            <summary>
            The password element
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.SoapEnvelope">
            <summary>
            Represents a SOAP Envelope
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapEnvelope.Header">
            <summary>
            The SOAP Envelope Header section
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapEnvelope.Body">
            <summary>
            The SOAP Envelope Body section
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.SoapEnvelope.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.SoapEnvelope.Prepare">
            <summary>
            Prepares a new SOAP Envelope to be manipulated
            </summary>
            <returns>The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> instance</returns>
        </member>
        <member name="T:SimpleSOAPClient.Models.SoapEnvelopeBody">
            <summary>
            Represents the SOAP Envelope Body section
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapEnvelopeBody.Value">
            <summary>
            The body content
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.SoapEnvelopeHeader">
            <summary>
            Represents the SOAP Envelope Header section
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapEnvelopeHeader.Headers">
            <summary>
            The collection of headers
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.Models.SoapEnvelopeHeader.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleSOAPClient.Models.SoapEnvelopeHeader"/>
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.SoapFault">
            <summary>
            Represents a SOAP Fault
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapFault.Code">
            <summary>
            The fault code
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapFault.String">
            <summary>
            The fault string
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapFault.Actor">
            <summary>
            The fault actor
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapFault.Detail">
            <summary>
            The fault detail
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.Models.SoapHeader">
            <summary>
            Base classe for SOAP Headers
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.Models.SoapHeader.MustUnderstand">
            <summary>
            Does the header must be understand?
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.SoapClient">
            <summary>
            The SOAP client that can be used to invoke SOAP Endpoints
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapClient.HttpClient">
            <summary>
            The used HTTP client
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.#ctor(SimpleSOAPClient.SoapClientSettings)">
            <summary>
            Creates a new SOAP Client
            </summary>
            <param name="settings">The settings to be used</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.#ctor(SimpleSOAPClient.SoapClientSettings,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new SOAP Client
            </summary>
            <param name="settings">The settings to be used</param>
            <param name="handler">The handler to be used by the <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.#ctor(SimpleSOAPClient.SoapClientSettings,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Creates a new SOAP Client
            </summary>
            <param name="settings">The settings to be used</param>
            <param name="httpClient">The <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/> to be used</param>
            <param name="disposeHttpClient">Should the client also be disposed</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.#ctor">
            <summary>
            Creates a new SOAP Client
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new SOAP Client
            </summary>
            <param name="handler">The handler to be used by the <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/></param>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Creates a new SOAP Client
            </summary>
            <param name="httpClient">The <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/> to be used</param>
            <param name="disposeHttpClient">Should the client also be disposed</param>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.Finalize">
            <summary>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapClient.Handlers">
            <summary>
            The handler
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapClient.Settings">
            <summary>
            The client settings
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.SendAsync(System.String,System.String,SimpleSOAPClient.Models.SoapEnvelope,System.Threading.CancellationToken)">
            <summary>
            Sends the given <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> into the specified url.
            </summary>
            <param name="url">The url that will receive the request</param>
            <param name="action">The SOAP action beeing performed</param>
            <param name="requestEnvelope">The <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> to be sent</param>
            <param name="ct">The cancellation token</param>
            <returns>A task to be awaited for the result</returns>
            <exception cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeSerializationException"></exception>
            <exception cref="T:SimpleSOAPClient.Exceptions.SoapEnvelopeDeserializationException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.AddHandler(SimpleSOAPClient.Handlers.ISoapHandler)">
            <summary>
            Adds the <see cref="T:SimpleSOAPClient.Handlers.ISoapHandler"/> to the <see cref="P:SimpleSOAPClient.SoapClient.Handlers"/> collection.
            </summary>
            <param name="handler">The handler to add</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.Dispose(System.Boolean)">
            <summary>
            Disposes the underline <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.Prepare">
            <summary>
            Prepares a new <see cref="T:SimpleSOAPClient.SoapClient"/> instance to be configured.
            </summary>
            <returns>The SOAP client to be configured</returns>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.Prepare(System.Net.Http.HttpMessageHandler)">
            <summary>
            Prepares a new <see cref="T:SimpleSOAPClient.SoapClient"/> instance to be configured.
            </summary>
            <param name="handler">The handler to be used by the <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/></param>
            <returns>The SOAP client to be configured</returns>
        </member>
        <member name="M:SimpleSOAPClient.SoapClient.Prepare(System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Prepares a new <see cref="T:SimpleSOAPClient.SoapClient"/> instance to be configured.
            </summary>
            <param name="httpClient">The <see cref="P:SimpleSOAPClient.SoapClient.HttpClient"/> to be used</param>
            <param name="disposeHttpClient">Should the client also be disposed</param>
            <returns>The SOAP client to be configured</returns>
        </member>
        <member name="T:SimpleSOAPClient.SoapClientSettings">
            <summary>
            Represents settings to be used by SOAP clients
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapClientSettings.Default">
            <summary>
            The default <see cref="T:SimpleSOAPClient.SoapClientSettings"/> to be used.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapClientSettings.SerializationProvider">
            <summary>
            The SOAP Envelope serialization provider
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapClientSettings.HttpClientFactory">
            <summary>
            The HTTP client factory
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.SoapClientSettings.#ctor">
            <summary>
            Creates a new instance with default values
            </summary>
        </member>
        <member name="T:SimpleSOAPClient.SoapEnvelopeSerializationProvider">
            <summary>
            Provider for serialization and deserialization of <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> instances.
            </summary>
        </member>
        <member name="P:SimpleSOAPClient.SoapEnvelopeSerializationProvider.XmlWriterSettings">
            <summary>
            XML writer settings to be used when serializing <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SimpleSOAPClient.SoapEnvelopeSerializationProvider.XmlSerializerNamespaces">
            <summary>
            XML serializer namespaces to be used when serializing <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SimpleSOAPClient.SoapEnvelopeSerializationProvider.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:SimpleSOAPClient.SoapEnvelopeSerializationProvider.ToXmlString(SimpleSOAPClient.Models.SoapEnvelope)">
            <summary>
            Serializes a given <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/> instance into a XML string.
            </summary>
            <param name="envelope">The instance to serialize</param>
            <returns>The resulting XML string</returns>
        </member>
        <member name="M:SimpleSOAPClient.SoapEnvelopeSerializationProvider.ToSoapEnvelope(System.String)">
            <summary>
            Deserializes a given XML string into a <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/>.
            </summary>
            <param name="xml">The XML string do deserialize</param>
            <returns>The resulting <see cref="T:SimpleSOAPClient.Models.SoapEnvelope"/></returns>
        </member>
    </members>
</doc>
